[hub]
	protocol = https
[core]
	compression = 9
	loosecompression = 9
	quotepath = true
	legacyheaders = false
	preloadindex = true
	#whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol,trailing

	autocrlf = false
	safecrlf = false

[pack]
	compression = 9
	threads = 0

[user]
	name = OneOfOne
	email = oneofone@gmail.com
	rname = Ahmed W.
	signingkey = 760B7805

[help]
	format = man


[branch]
	autosetupmerge = true

[diff]
	rename = copy
	suppress-blank-empty = true
	renamelimit = 0
	algorithm = patience
	tool = code

[fetch]
	recurseSubmodules = true

[difftool "code"]
	cmd = code --wait --diff $LOCAL $REMOTE

[log]
	date = iso
	decorate = short
	abbrevCommit = true

[status]
	relativePaths = false
	submodulesummary = true

[http]
	cookiefile = /home/oneofone/.gitcookies

[credential]
	helper = store

[alias]
	ll = log --stat --abbrev-commit --abbrev=8 --pretty='format:%Cgreen*%Creset Commit (%G?): %Cblue%h%Creset (%Cred%H%Creset)%n    %CgreenAuthor:%Creset %an (%ae)%n    %CgreenDate:%Creset %ad%n    %CgreenSubject: %Creset%s%n%b' --show-signature
	l1 = log --abbrev-commit --abbrev=8 --pretty='format:%Cgreen%h%Creset [ %ad ] %s'
	l2 = log --color --abbrev-commit --abbrev=8 --pretty='format:%Cred*%Creset %Cgreen%h%Creset [ %s ]'
	raw = log -r --root --raw --no-abbrev --pretty='format:%h~%an~%ad~'
	changes = diff --name-status -r

	rp = repack -a -d --depth=250 --window=250 -f
	co = checkout

	st = status --short --untracked-files=no

	d = diff -p -b -w --ignore-space-at-eol --src-prefix=old/ --dst-prefix=new/
	dlast = !git d HEAD~1
	cdiff = !git d --cached
	hdiff = !git d HEAD

	default-branch = !git remote show origin | sed -n '/HEAD branch/s/.*: //p'

	main = !sh -c 'git checkout $(git default-branch) && git pull'
	merge-main = !sh -c 'git fetch origin $(git default-branch) && git merge origin/$(git default-branch) -m \"main sync\"'

	stash-and-pull = !git stash && git pull && git stash pop
	new-branch = "!f() { git stash &>/dev/null ; git checkout -b $@ && git stash pop &>/dev/null; }; f"
	sap = !git stash-and-pull
	nb = !git new-branch

	grep-all = "!f() { git grep -ni $@ `git for-each-ref --format='%(refname)' refs/` | perl -pe 's@refs/[^/]+/@@g'; }; f"
	g = grep --break --heading --line-number

	ignore = update-index --assume-unchanged
	unignore = update-index --no-assume-unchanged
	ignored = !git ls-files -v | grep "^[[:lower:]]"
	gc-all = !git -c gc.reflogExpire=0 -c gc.reflogExpireUnreachable=0 -c gc.rerereresolved=0 -c gc.rerereunresolved=0 -c gc.pruneExpire=now gc --aggressive
	undo-last = reset --soft HEAD~1

	list-old-branches = !git branch --merged | grep -Ev 'master|main|dev'
	delete-merged-branches = "!git branch -d $(git list-old-branches) && git remote prune origin"
	clean-old = "!f() { git delete-merged-branches; du -h --max-depth=0 .git && git reflog expire --all --expire=now && git gc --prune=now --aggressive; du -h --max-depth=0 .git; }; f"


	fuckit = !git reset --hard && git pull

[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f

[advice]
	detachedHead = no

[pull]
	rebase = false

[init]
	defaultBranch = main

[credential]
	helper = cache
[protocol "file"]
	allow = always
